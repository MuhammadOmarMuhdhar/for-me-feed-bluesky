name: Feed Ranking ETL (Modular)
# 
# Refactored ETL System Architecture:
# - ETL/ranking/feedOrchestrator.py: Main entry point
# - ETL/ranking/userData.py: User data processing
# - ETL/ranking/postCollector.py: Post collection from feeds/networks  
# - ETL/ranking/rankingEngine.py: BM25 scoring, sentiment analysis
# - ETL/ranking/networkAnalyzer.py: Network analysis, 2nd degree connections
# - ETL/ranking/contentFilters.py: FAQ/engagement filtering
# - ETL/ranking/cacheManager.py: Redis cache operations
# - ETL/ranking/config.py: Constants and configuration

on:
  workflow_dispatch: # Manual triggering
    inputs:
      test_mode:
        description: 'Run in test mode (limited users)'
        required: false
        default: 'false'
  repository_dispatch: # API trigger from Google Cloud Scheduler
    types: [run-etl]

env:
  BLUESKY_IDENTIFIER: ${{ secrets.BLUESKY_IDENTIFIER }}
  BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
  BIGQUERY_PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
  BIGQUERY_DATASET_ID: ${{ secrets.BIGQUERY_DATASET_ID }}
  BIGQUERY_TABLE_ID_POSTS: ${{ secrets.BIGQUERY_TABLE_ID_POSTS }}
  BIGQUERY_CREDENTIALS_JSON: ${{ secrets.BIGQUERY_CREDENTIALS_JSON }}
  REDIS_URL: ${{ secrets.REDIS_URL }}

jobs:
  ranking-etl:
    runs-on: ubuntu-latest
    name: Calculate and Cache Rankings (Modular ETL)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Feed Ranking ETL
        run: |
          # Using refactored modular ETL system (was ETL/rankingETL.py)
          python ETL/ranking/feedOrchestrator.py --test-mode ${{ github.event.inputs.test_mode || 'false' }}

      - name: Verify Cache Status
        run: |
          python -c "
          from client.redis import Client
          import os
          
          redis_client = Client()
          stats = redis_client.get_stats()
          cached_users = redis_client.get_cached_users()
          
          print(f'Redis Stats: {stats}')
          print(f'Cached feeds for {len(cached_users)} users')
          if cached_users:
              print(f'Sample users: {cached_users[:5]}')
          "